// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftManagement.Data;

#nullable disable

namespace ShiftManagement.Migrations
{
    [DbContext(typeof(ShiftManagementContext))]
    [Migration("20250807060338_UpdateSendData_v2")]
    partial class UpdateSendData_v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShiftManagement.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<int>("StoreID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("ManagerID");

                    b.HasIndex("StoreID");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultShiftCodeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HolidayID");

                    b.HasIndex("DefaultShiftCodeID");

                    b.ToTable("Holidays", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserID");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftCode", b =>
                {
                    b.Property<int>("ShiftCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftCodeID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLeave")
                        .HasColumnType("bit");

                    b.Property<decimal>("WorkUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShiftCodeID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ShiftCodes", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ChangedBy")
                        .HasColumnType("int");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleID")
                        .HasColumnType("int");

                    b.HasKey("HistoryID");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("ScheduleID");

                    b.ToTable("ShiftHistory", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("StoreID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleID");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("StoreID");

                    b.HasIndex("EmployeeID", "Date")
                        .IsUnique();

                    b.ToTable("ShiftSchedule", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftScheduleDetail", b =>
                {
                    b.Property<int>("DetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailID"));

                    b.Property<int>("ScheduleID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftCodeID")
                        .HasColumnType("int");

                    b.Property<string>("ShiftType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WorkUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DetailID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("ShiftCodeID");

                    b.ToTable("ShiftScheduleDetail", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.Store", b =>
                {
                    b.Property<int>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StoreID");

                    b.HasIndex("StoreName");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("StoreID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("StoreID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleID"));

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserRoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID", "RoleID")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.WorkUnitRule", b =>
                {
                    b.Property<int>("RuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RuleID"));

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftCodeID")
                        .HasColumnType("int");

                    b.Property<decimal>("WorkUnit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RuleID");

                    b.HasIndex("ShiftCodeID");

                    b.ToTable("WorkUnitRules", (string)null);
                });

            modelBuilder.Entity("ShiftManagement.Models.Department", b =>
                {
                    b.HasOne("ShiftManagement.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShiftManagement.Models.Store", "Store")
                        .WithMany("Departments")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ShiftManagement.Models.Holiday", b =>
                {
                    b.HasOne("ShiftManagement.Models.ShiftCode", "DefaultShiftCode")
                        .WithMany("Holidays")
                        .HasForeignKey("DefaultShiftCodeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultShiftCode");
                });

            modelBuilder.Entity("ShiftManagement.Models.Log", b =>
                {
                    b.HasOne("ShiftManagement.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftHistory", b =>
                {
                    b.HasOne("ShiftManagement.Models.User", "ChangedUser")
                        .WithMany("ShiftHistories")
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShiftManagement.Models.ShiftSchedule", "ShiftSchedule")
                        .WithMany("ShiftHistories")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedUser");

                    b.Navigation("ShiftSchedule");
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftSchedule", b =>
                {
                    b.HasOne("ShiftManagement.Models.User", "CreatedUser")
                        .WithMany("CreatedSchedules")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ShiftManagement.Models.Department", "Department")
                        .WithMany("ShiftSchedules")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.User", "Employee")
                        .WithMany("ShiftSchedules")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Store", "Store")
                        .WithMany("ShiftSchedules")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedUser");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftScheduleDetail", b =>
                {
                    b.HasOne("ShiftManagement.Models.ShiftSchedule", "ShiftSchedule")
                        .WithMany("ShiftScheduleDetails")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.ShiftCode", "ShiftCode")
                        .WithMany("ShiftScheduleDetails")
                        .HasForeignKey("ShiftCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShiftCode");

                    b.Navigation("ShiftSchedule");
                });

            modelBuilder.Entity("ShiftManagement.Models.User", b =>
                {
                    b.HasOne("ShiftManagement.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ShiftManagement.Models.Store", "Store")
                        .WithMany("Users")
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ShiftManagement.Models.UserRole", b =>
                {
                    b.HasOne("ShiftManagement.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShiftManagement.Models.WorkUnitRule", b =>
                {
                    b.HasOne("ShiftManagement.Models.ShiftCode", "ShiftCode")
                        .WithMany("WorkUnitRules")
                        .HasForeignKey("ShiftCodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShiftCode");
                });

            modelBuilder.Entity("ShiftManagement.Models.Department", b =>
                {
                    b.Navigation("ShiftSchedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShiftManagement.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftCode", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("ShiftScheduleDetails");

                    b.Navigation("WorkUnitRules");
                });

            modelBuilder.Entity("ShiftManagement.Models.ShiftSchedule", b =>
                {
                    b.Navigation("ShiftHistories");

                    b.Navigation("ShiftScheduleDetails");
                });

            modelBuilder.Entity("ShiftManagement.Models.Store", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("ShiftSchedules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ShiftManagement.Models.User", b =>
                {
                    b.Navigation("CreatedSchedules");

                    b.Navigation("Logs");

                    b.Navigation("ShiftHistories");

                    b.Navigation("ShiftSchedules");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
