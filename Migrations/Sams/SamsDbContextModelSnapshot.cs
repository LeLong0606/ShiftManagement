// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftManagement.Data;

#nullable disable

namespace ShiftManagement.Migrations.Sams
{
    [DbContext(typeof(SamsDbContext))]
    partial class SamsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sams")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShiftManagement.Models.Sams.CalendarDate", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<byte>("Weekday")
                        .HasColumnType("tinyint");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Date");

                    b.HasIndex("IsHoliday")
                        .HasFilter("[IsHoliday] = 1");

                    b.HasIndex("IsWeekend")
                        .HasFilter("[IsWeekend] = 1");

                    b.HasIndex("Year", "Month");

                    b.ToTable("CalendarDate", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("LocationID");

                    b.HasIndex("LocationID", "Code")
                        .IsUnique();

                    b.ToTable("Department", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("PositionID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmpCode")
                        .IsUnique();

                    b.HasIndex("PositionID");

                    b.HasIndex("TeamID");

                    b.HasIndex("TeamID", "Status");

                    b.ToTable("Employee", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.ExportRun", b =>
                {
                    b.Property<long>("ExportRunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExportRunID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PeriodEnd")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PeriodStart")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("ExportRunID");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateID");

                    b.HasIndex("TeamID", "Target", "CreatedAt");

                    b.ToTable("ExportRun", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.ExportTemplate", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Engine")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LayoutJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("TemplateID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Target", "IsActive");

                    b.ToTable("ExportTemplate", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Holiday", b =>
                {
                    b.Property<int>("HolidayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("HolidayID");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("Holiday", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LocationID");

                    b.ToTable("Location", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PositionID");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Position", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.RosterEntry", b =>
                {
                    b.Property<long>("RosterEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RosterEntryID"));

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTimeOverride")
                        .HasColumnType("time(0)");

                    b.Property<string>("LeaveCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RosterPeriodID")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftBaseID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTimeOverride")
                        .HasColumnType("time(0)");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("RosterEntryID");

                    b.HasIndex("ShiftBaseID");

                    b.HasIndex("WorkDate");

                    b.HasIndex("EmployeeID", "WorkDate");

                    b.HasIndex("RosterPeriodID", "EmployeeID", "WorkDate")
                        .IsUnique();

                    b.ToTable("RosterEntry", "sams", t =>
                        {
                            t.HasCheckConstraint("CK_RosterEntry_OneKind", "(([ShiftBaseID] IS NOT NULL AND [LeaveCode] IS NULL) OR ([ShiftBaseID] IS NULL AND [LeaveCode] IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.RosterPeriod", b =>
                {
                    b.Property<int>("RosterPeriodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RosterPeriodID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("date");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("RosterPeriodID");

                    b.HasIndex("TeamID", "PeriodStartDate", "PeriodEndDate");

                    b.HasIndex("TeamID", "Status", "PeriodStartDate");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("TeamID", "Status", "PeriodStartDate"), new[] { "PeriodEndDate" });

                    b.ToTable("RosterPeriod", "sams", t =>
                        {
                            t.HasCheckConstraint("CK_RosterPeriod_Range", "[PeriodEndDate] >= [PeriodStartDate]");
                        });
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.ShiftBase", b =>
                {
                    b.Property<int>("ShiftBaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftBaseID"));

                    b.Property<int>("BreakMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<bool>("IsOvernight")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time(0)");

                    b.HasKey("ShiftBaseID");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ShiftBase", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TeamID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("DepartmentID", "Code")
                        .IsUnique();

                    b.ToTable("Team", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamSettings", b =>
                {
                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<string>("SettingsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TeamID");

                    b.ToTable("TeamSettings", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamShiftAlias", b =>
                {
                    b.Property<int>("TeamShiftAliasID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamShiftAliasID"));

                    b.Property<string>("AliasCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LeaveCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ShiftBaseID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("TeamShiftAliasID");

                    b.HasIndex("ShiftBaseID");

                    b.HasIndex("TeamID", "AliasCode")
                        .IsUnique();

                    b.HasIndex("TeamID", "ShiftBaseID", "LeaveCode")
                        .IsUnique()
                        .HasFilter("[ShiftBaseID] IS NOT NULL AND [LeaveCode] IS NOT NULL");

                    b.ToTable("TeamShiftAlias", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamShiftOverride", b =>
                {
                    b.Property<int>("TeamShiftOverrideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamShiftOverrideID"));

                    b.Property<int?>("BreakMinutes")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<bool?>("IsOvernight")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ShiftBaseID")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time(0)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("TeamShiftOverrideID");

                    b.HasIndex("ShiftBaseID");

                    b.HasIndex("TeamID");

                    b.HasIndex("TeamID", "ShiftBaseID")
                        .IsUnique();

                    b.ToTable("TeamShiftOverride", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamTemplateBinding", b =>
                {
                    b.Property<int>("TeamTemplateBindingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamTemplateBindingID"));

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("date");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("TeamTemplateBindingID");

                    b.HasIndex("TemplateID");

                    b.HasIndex("TeamID", "Target")
                        .HasFilter("[EffectiveTo] IS NULL");

                    b.HasIndex("TeamID", "TemplateID", "Target", "EffectiveFrom")
                        .IsUnique();

                    b.ToTable("TeamTemplateBinding", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TemplateFieldMap", b =>
                {
                    b.Property<int>("TemplateFieldMapID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateFieldMapID"));

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SourceExpr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("TemplateFieldMapID");

                    b.HasIndex("TemplateID");

                    b.HasIndex("TemplateID", "Placeholder")
                        .IsUnique();

                    b.ToTable("TemplateFieldMap", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TimesheetBatch", b =>
                {
                    b.Property<long>("TimesheetBatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TimesheetBatchID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("SourceRosterID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("TimesheetBatchID");

                    b.HasIndex("SourceRosterID");

                    b.HasIndex("TeamID", "PeriodStartDate", "PeriodEndDate");

                    b.HasIndex("TeamID", "Status", "PeriodStartDate");

                    b.ToTable("TimesheetBatch", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TimesheetEntry", b =>
                {
                    b.Property<long>("TimesheetEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TimesheetEntryID"));

                    b.Property<string>("Attributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeDisplay")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("PlanEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlannedMinutes")
                        .HasColumnType("int");

                    b.Property<long>("TimesheetBatchID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("TimesheetEntryID");

                    b.HasIndex("EmployeeID", "WorkDate");

                    b.HasIndex("TimesheetBatchID", "EmployeeID", "WorkDate");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("TimesheetBatchID", "EmployeeID", "WorkDate"), new[] { "Kind", "CodeDisplay" });

                    b.ToTable("TimesheetEntry", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Views.VRosterForExport", b =>
                {
                    b.Property<string>("CodeDisplay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlanEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanStart")
                        .HasColumnType("datetime2");

                    b.Property<long>("RosterEntryID")
                        .HasColumnType("bigint");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.ToTable("vRosterForExport", "sams");

                    b.ToView("vRosterForExport", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Views.VTimesheetForExport", b =>
                {
                    b.Property<string>("CodeDisplay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlanEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlannedMinutes")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.Property<long>("TimesheetEntryID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2");

                    b.ToTable("vTimesheetForExport", "sams");

                    b.ToView("vTimesheetForExport", "sams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Department", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Location", "Location")
                        .WithMany("Departments")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Employee", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionID");

                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamID");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.ExportRun", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("ExportRuns")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Sams.ExportTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateID");

                    b.Navigation("Team");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.RosterEntry", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Employee", "Employee")
                        .WithMany("RosterEntries")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Sams.RosterPeriod", "RosterPeriod")
                        .WithMany("RosterEntries")
                        .HasForeignKey("RosterPeriodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Sams.ShiftBase", "ShiftBase")
                        .WithMany("RosterEntries")
                        .HasForeignKey("ShiftBaseID");

                    b.Navigation("Employee");

                    b.Navigation("RosterPeriod");

                    b.Navigation("ShiftBase");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.RosterPeriod", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("RosterPeriods")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Team", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Department", "Department")
                        .WithMany("Teams")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamSettings", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithOne("Settings")
                        .HasForeignKey("ShiftManagement.Models.Sams.TeamSettings", "TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamShiftAlias", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.ShiftBase", "ShiftBase")
                        .WithMany("TeamAliases")
                        .HasForeignKey("ShiftBaseID");

                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("ShiftAliases")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBase");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamShiftOverride", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.ShiftBase", "ShiftBase")
                        .WithMany("TeamOverrides")
                        .HasForeignKey("ShiftBaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("ShiftOverrides")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftBase");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TeamTemplateBinding", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("TemplateBindings")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Sams.ExportTemplate", "Template")
                        .WithMany("TeamBindings")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TemplateFieldMap", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.ExportTemplate", "Template")
                        .WithMany("FieldMaps")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TimesheetBatch", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.RosterPeriod", "SourceRoster")
                        .WithMany()
                        .HasForeignKey("SourceRosterID");

                    b.HasOne("ShiftManagement.Models.Sams.Team", "Team")
                        .WithMany("TimesheetBatches")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceRoster");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TimesheetEntry", b =>
                {
                    b.HasOne("ShiftManagement.Models.Sams.Employee", "Employee")
                        .WithMany("TimesheetEntries")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShiftManagement.Models.Sams.TimesheetBatch", "TimesheetBatch")
                        .WithMany("TimesheetEntries")
                        .HasForeignKey("TimesheetBatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("TimesheetBatch");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Department", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Employee", b =>
                {
                    b.Navigation("RosterEntries");

                    b.Navigation("TimesheetEntries");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.ExportTemplate", b =>
                {
                    b.Navigation("FieldMaps");

                    b.Navigation("TeamBindings");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Location", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.RosterPeriod", b =>
                {
                    b.Navigation("RosterEntries");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.ShiftBase", b =>
                {
                    b.Navigation("RosterEntries");

                    b.Navigation("TeamAliases");

                    b.Navigation("TeamOverrides");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.Team", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("ExportRuns");

                    b.Navigation("RosterPeriods");

                    b.Navigation("Settings");

                    b.Navigation("ShiftAliases");

                    b.Navigation("ShiftOverrides");

                    b.Navigation("TemplateBindings");

                    b.Navigation("TimesheetBatches");
                });

            modelBuilder.Entity("ShiftManagement.Models.Sams.TimesheetBatch", b =>
                {
                    b.Navigation("TimesheetEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
